# This policy uses the Sentinel tfplan import to deny creation
# of listed Azure services

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

### Rules ###

deny_services = rule {
    not any denied_azure_services as denied {
        length( find_resources_from_plan(denied)) > 0
    }
}

##### Lists #####

# Denied Azure Services
denied_azure_services = [
  "azurerm_mariadb_database",
  "azurerm_mariadb_server",
]

main = rule {
	deny_services
}