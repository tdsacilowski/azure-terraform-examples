# This policy uses the Sentinel tfplan import to ensure only allowed
# IP ranges are used for SQL Firewall rules

##### Imports #####

import "tfplan"
import "sockaddr"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

##### Rules #####

only_allowed_cidrs = rule {
	all find_resources_from_plan("azurerm_sql_firewall_rule") as fw {
        all allowed_cidr_blocks as allowed_cidr {
            sockaddr.is_contained(allowed_cidr, fw.applied.start_ip_address) and
            sockaddr.is_contained(allowed_cidr, fw.applied.end_ip_address)
        }
	}
}

##### Lists #####

allowed_cidr_blocks = [
	"10.0.0.0/16",
]

##### Main #####

main = rule {
	only_allowed_cidrs
}
