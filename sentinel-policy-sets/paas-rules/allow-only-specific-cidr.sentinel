# This policy uses the Sentinel tfplan import to ensure only allowed
# IP ranges are used for SQL Firewall rules

##### Imports #####

import "tfplan"
import "sockaddr"

##### Functions #####

# Get an array of all resources of the given type (or an empty array).
get_resources = func(type) {
	if length(tfplan.module_paths else []) > 0 { # always true in the real tfplan import
		return get_resources_all_modules(type)
	} else { # fallback for tests
		return get_resources_root_only(type)
	}
}

get_resources_root_only = func(type) {
	resources = []
	named_and_counted_resources = tfplan.resources[type] else {}
	# Get resource bodies out of nested resource maps, from:
	# {"name": {"0": {"applied": {...}, "diff": {...} }, "1": {...}}, "name": {...}}
	# to:
	# [{"applied": {...}, "diff": {...}}, {"applied": {...}, "diff": {...}}, ...]
	for named_and_counted_resources as _, instances {
		for instances as _, body {
			append(resources, body)
		}
	}
	return resources
}

get_resources_all_modules = func(type) {
	resources = []
	for tfplan.module_paths as path {
		named_and_counted_resources = tfplan.module(path).resources[type] else {}
		# Get resource bodies out of nested resource maps, from:
		# {"name": {"0": {"applied": {...}, "diff": {...} }, "1": {...}}, "name": {...}}
		# to:
		# [{"applied": {...}, "diff": {...}}, {"applied": {...}, "diff": {...}}, ...]
		for named_and_counted_resources as _, instances {
			for instances as _, body {
				append(resources, body)
			}
		}
	}
	return resources
}

##### Rules #####

only_allowed_cidrs = rule {
	all get_resources("azurerm_sql_firewall_rule") as fw {
        all allowed_cidr_blocks as allowed_cidr {
            sockaddr.is_contained(allowed_cidr, fw.applied.start_ip_address) and
            sockaddr.is_contained(allowed_cidr, fw.applied.end_ip_address)
        }
	}
}

##### Lists #####

allowed_cidr_blocks = [
	"10.0.0.0/16",
]

##### Main #####

main = rule {
	only_allowed_cidrs
}
